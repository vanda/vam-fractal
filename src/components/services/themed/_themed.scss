@use "../../base";
@use "sass:color";
@use "sass:map";

@each $palette, $map in base.$themecolors-theme-colors {
  @each $color in map.keys($map) {
    .theme-#{$color} {
      --theme-color: #{map.get($map, $color)};
      --theme-color-darkened: #{color.scale(map.get($map, $color), $lightness: -10%)};
    }
  }
}

.s-themed {
  &--color {
    &#{&} {
      color: var(--theme-color, map.get(map.get(base.$themecolors-theme-colors, global), #{base.$themecolors-theme-color-default}));
      transition: color 0.2s ease-out, background-color 0.2s ease-out, border-color 0.2s ease-out;

      &--hover {
        &:hover {
          color: var(--theme-color-darkened, #{color.scale(map.get(map.get(base.$themecolors-theme-colors, global), #{base.$themecolors-theme-color-default}), $lightness: -10%)});
        }
      }
    }
  }

  &--background-color {
    &#{&} {
      background-color: var(--theme-color, map.get(map.get(base.$themecolors-theme-colors, global), #{base.$themecolors-theme-color-default}));
      color: base.sitecolors-siteColor(vam-black);

      &--hover {
        &:hover {
          background-color: var(--theme-color-darkened, #{color.scale(map.get(map.get(base.$themecolors-theme-colors, global), #{base.$themecolors-theme-color-default}), $lightness: -10%)});
        }
      }
    }
  }

  &--border-color {
    &#{&} {
      border-color: var(--theme-color, map.get(map.get(base.$themecolors-theme-colors, global), #{base.$themecolors-theme-color-default}));

      &:hover {
        border-color: var(--theme-color-darkened, #{color.scale(map.get(map.get(base.$themecolors-theme-colors, global), #{base.$themecolors-theme-color-default}), $lightness: -10%)});
      }
    }
  }
}
